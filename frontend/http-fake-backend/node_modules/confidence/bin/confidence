#!/usr/bin/env node
'use strict';

// Load modules

const Fs = require('fs');
const Yargs = require('yargs');
const Alce = require('alce');
const Confidence = require('../');


// Declare internals

const internals = {};


internals.checkArguments = function (argv) {
    return typeof argv.indentation === 'number';
}


internals.argv = Yargs.usage('Usage: $0 -c config.json [--filter.criterion=value]')
                    .demand(['c'])
                    .option('i', {
                        alias: 'indentation',
                        default: 4
                    })
                    .check(internals.checkArguments)
                    .argv;


internals.getConfig = function () {

    let config = null;
    const configPath = !internals.argv.c.startsWith('/') ? process.cwd() + '/' + internals.argv.c : internals.argv.c;

    try {
        config = Alce.parse(Fs.readFileSync(configPath));
    }
    catch (err) {
        console.log('Failed loading configuration file: ' + internals.argv.c + ' (' + err.message + ')');
        process.exit(1);
    }

    return config;
}


internals.generate = function () {

    const config = internals.getConfig();
    const store = new Confidence.Store(config);
    const set = store.get('/', internals.argv.filter);
    const indentation = internals.argv.indentation;

    if (!set) {
        process.stderr.write('Failed to generate document');
    }

    process.stdout.write(JSON.stringify(set, null, indentation));
};

internals.generate();
